import abc

from pyaerocom import Colocator
from pyaerocom._lowlevel_helpers import TypeValidator
from pyaerocom.aeroval import EvalSetup
from pyaerocom.aeroval.experiment_output import ExperimentOutput


class HasConfig:
    cfg = TypeValidator(EvalSetup)
    exp_output = TypeValidator(ExperimentOutput)
    def __init__(self, cfg : EvalSetup):
        self.cfg = cfg
        self.exp_output = ExperimentOutput(cfg)

    @property
    def raise_exceptions(self):
        return self.cfg.colocation_opts.raise_exceptions

    @property
    def reanalyse_existing(self):
        return self.cfg.colocation_opts.reanalyse_existing


class ProcessingEngine(HasConfig, abc.ABC):

    @abc.abstractmethod
    def run(self, *args, **kwargs) -> list:
        """
        Method that runs the processing based on settings in :attr:`cfg`

        Parameters
        ----------
        *args
            positional arguments.
        **kwargs
            Keyword arguments.

        Returns
        -------
        list
            list of output file paths generated by the engine.

        """
        pass


class HasColocator(HasConfig):
    def get_colocator(self, model_name:str=None,
                      obs_name:str=None) -> Colocator:
        """
        Instantiate colocation engine

        Parameters
        ----------
        model_name : str, optional
            name of model. The default is None.
        obs_name : str, optional
            name of obs. The default is None.

        Returns
        -------
        Colocator

        """
        col = Colocator(**self.cfg.colocation_opts)
        if obs_name:
            obs_cfg = self.cfg.get_obs_entry(obs_name)
            col.import_from(obs_cfg)
            col.add_glob_meta(diurnal_only=self._get_diurnal_only(obs_name))
        if model_name:
            mod_cfg = self.cfg.get_model_entry(model_name)
            col.import_from(mod_cfg)
        outdir = self.cfg.path_manager.get_coldata_dir()
        col.basedir_coldata = outdir
        return col


class DataImporter(HasColocator):
    def read_model_data(self, model_name, var_name, **kwargs):
        """Read model variable data

        """
        col = self.get_colocator(model_name)
        data = col.read_model_data(var_name, **kwargs)

        return data

    def read_ungridded_obsdata(self, obs_name, var_name):
        """Read observation network"""

        col = self.get_colocator(obs_name)

        data = col.read_ungridded(var_name)
        return data